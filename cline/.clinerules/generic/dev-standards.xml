<dev-standards>
  <instructions>
    - Provide clean, efficient and simple code solutions.
    - Avoid over-engineering.
    - Prioritise consistency across existing code.
    - Follow code conventions and best practices for the specific technology stack being used.
    - Consider edge cases and potential issues in your implementations.
    - Add unit tests to ensure code reliability.
    - Self-explanatory code is preferred with no or limited comments.
    - Only add inline comments in the code if the code is too complex to understand without it.
    Explanations via inline comments should be extremely scarce in the codebase.
    - Structure your code in a way that is easy to write unit tests for.
    - Avoid type, const or enum duplication.
  </instructions>

  <output_format>
    <code_blocks>
      Use markdown code blocks with appropriate language syntax highlighting.
      Modularise where possible.
      Prefer functional coding over inheritance in most cases. However, when state or context within
      a single entity is required, try to use classes.
      If state is required to be kept across the entire system in the currently worked on project
      segment, refer to the best practice state management solution for the used tech stack.
    </code_blocks>
  </output_format>

  <error_handling>
    - Code defensively, making sure that possible pitfalls are covered around incorrect inputs that
    could make the code crash. However, do not over engineer the solution if the user instructs you
    that error handling will be covered at a later stage. In that case, as part of your task
    handover documentation add a list of recommendations of checks that should be added to avoid
    likely code crashes.
  </error_handling>

  <unit_testing>
    <unit_testing_rules>
      When writing any unit tests in any tech stack:
      - Each unit test's purpose is to test that the specific unit's code behaves a certain way,
      covering majority of outliers and edge cases.
      - Unit tests are cheaper and faster to run than integration or end-to-end tests. Hence, focus
      on writing the majority of scenarios to test in the unit tests.
      - Stick to the existing testing style already used in the project for that tech stack. For
      reference, look at 2 testing files of your choice, or the ones advised to you as part of the
      cline rules for that tech stack.
      - Mock external functions or tools using existing mocking style. Keep mocking minimal. Only
      specify mock implementations for what is actually required.
      - Do not add comments to the unit tests. They should be self explanatory based on well chosen
      variable names.
      - Group tests for each function or logical user experience so that they are easier to read.
      - Keep tests small and short. Write more smaller tests rather than a few long complex
      inter-dependant tests.
      - Make sure every unit test can run independently of other unit tests running. Unit tests
      should not have an order and should not disrupt each other's state if the order of execution
      of the tests changes.
    </unit_testing_rules>

    <unit_testing_instructions>
      1. Determine which file you are testing and understand the file and its functional purpose
      thoroughly.
      2. Devise a structural unit testing plan that includes tests for the majority of lines of
      code,
      code blocks and logical statements in the file.
      3. Clarify any uncertainties with the user before writing the tests and revise your plan
      accordingly until your confidence in your plan correctly adhering to the notes given above
      is at least 8 out of 10.
      4. Write the first unit test.
      5. Run each test after writing it to make sure it passes.
      6. Once the test passes, change an input to make the test fail, to check that the test isn't
      always truthy. Revert it back to make the test pass again.
      7. Write the next unit test.
      8. Once all tests are written according to your plan, run them all to make sure that they
      don't fail when ran together.
      9. Make sure that coverage of the entire unit tests in the project passes.
    </unit_testing_instructions>
  </unit_testing>

  <logging>
    - Use the existing logging solution in the project. If you do not know what the existing
    solution is or there is none, ask the user what they want you to do next.
    - Write basic logging for your code.
    - Include important variables that make it easier for the reader to understand the state of the
    code for the logged line.
    - Add debug logs for areas that are more likely to break or need to be checked if errors occur
    in the future.
    - When writing logs that are exposed in a browser, keep them minimal and make sure to not expose
    any information that can help hackers compromise the system.
    - Always add a log as part of error handling code.
    - Never log passwords, credentials, tokens, PII, or other secure information.
    - If you are unsure about how or where to log, do your best and focus on just minimal logging.
    Do not dwell on logging too much.
  </logging>
</dev-standards>